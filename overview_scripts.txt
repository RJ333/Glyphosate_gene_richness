zu jedem skript:

input, output, position in workflow, repo, issue

Code_development/taxonomy_analysis (master)
- processing_output
-- calculating_tax_rel_abundance.txt #6
# this script will be used to calculate the absolute abundance based on taxonomically annotated
# reads. Taking contig length and sequencing depth into account, a normalised relative abundance
# will be calculated. Goal is to specify different taxonomic levels to be plotted in R
-- fasta_to_one_line_and_contig_length.sh #6
# to get contig id and fasta in the same line (better I guess), prokka.fna as input
# generate contig id <tab> contig length table (first line is empty, therefore ignoring it by NR > 1)
# also contains loop for all metagenomes (not tested) 
# generates a list with contig lengths for each metagenome
-- get_contig_length_from_prokkafna.sh #6
# I guess the ready version from above? output contig_length.tsv, including sample column
-- merging_taxonomy_with_prokka_data.txt #7
# this script should manage the linking of each contig's taxonomic annotation (if present)
# to the functional annotation from prokka. One goal is to check specifically for a certain gene
# e.g. phn genes and to be able to extract all taxonomy related to this gene.
-- testfna.fna: 100 lines of contigs with newlines

- mapping: Johannes'' part
-- download database
-- generate reference hash
-- add taxID to header
-- create R plots


Glyphosate_gene_richness (master)
- parse_prokka_genes_to_bed
-- extract_and_count_all_genes_and_EC_numbers_per_sample_from_prokka.sh #21
# extract and count all genes and previous column (ec numbers) per sample from prokka
# input prokka.annotation, output e.g. A1_gene_list
# better version available with awk "match"?
-- generate_all_products_from_prokka.sh #20
# get all product names from all annotation.filt.gffs
# replace whitespace and / with @
# set optional threshold for product appearances
# output is "unique_products_greater_6_all_samples.tsv"
-- parse_annotation.py #10
# old script for 10000 bp cut up contigs
-- parse_prokka_output.sh #10
# main script to check via bed.file how many reads cover a certain gene/ec_number/product region
# input are bam files and the list of target genes/etc

# multiple versions, one with gnu parallel for all products: bio-49: /data/Rene/parallel_test_per_sample.sh

-- missing: map product names back gen names, assign random name such as gen1, gen2 etc to products without gene name

- process_coverage_information (Master) # this is basically all for the old co-assembled data
-- 01_add_samplename_and_combine_coverage_lists.sh
# OLD CO-ASSEMBLY DATA: takes the coverage information per each base for each sample in a folder called e.g. "phnC", containing all areas on contigs carrying "phnC"
# combines coverage information from 10 samples into one lists and adds a column "sample" 
-- 02_remove_coverage_below_threshold.sh
# removes entries from the coverage list which are below a certain per-base coverage
-- 03_add_genes_to_coverage.sh
# adds a column with the gene, so that lists for different genes can be combined. each gene occurence is numbered, so two genes on one contig can be distuingished
-- 04_generate_gene_length_and_merge_with_contig_length_per_gene.sh
# first part extracts gene length from prokka annotation > gene_length_${var2}.txt
# this works only for genes which have an annotated ec number, otherwise it picks the wrong column
# then contig_length from file contig_lengths_cut.txt is combined with gene_length > ${var2}_contig_and_gene_length.txt
-- 05_filter_gene_contig_length.sh
# this gives us the oppurtunity, to also filter by minimum contig length and gene length
-- 06/07 
# R scripts in different versions to display coverage information
# generates plots for bases per gene per sample and richness per gene per sample


- read_abundance (Master)
# data and R script to perfom a mann-whitney test to test for statistical significance of sequencing influence on gene richness


- single_assembly_gene_richness_and_reads_mapping (Master)
-- 01_combine_samtools_view_files
# data from parse prokka output generates tables per gene/product and per sample, but table name contains sample and gene
# this script adds a column consisting of the tablename   unnamed_file > named_file
-- 02_append_and_clean_samtools_view_output
# takes all the named_files and merges them to one huge list
# splits table name into separate columns for sample and gene
# removes old files
-- 03_calculate_and_plot_gene_richness.R
# this script uses the reads per gene data, which has been processed before
# it generates richness and abundance data from it and,also relation to day 0
# and plots it. 
# gene richness should be at least above 5 once to be taken into account
# mapped reads are not normalized by length of gene nor sequencing depth yet
